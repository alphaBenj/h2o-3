def DEFAULT_NODE_LABEL = 'docker && !mr-0xc8'

def executeTestStages = null
def buildConfig = null
def emailContent = null
def sendEmail = null
def result = 'FAILURE'

try {
  ansiColor('xterm') {
    timestamps {

      node(DEFAULT_NODE_LABEL) {
        stage('Prepare and Build') {
          dir('h2o-3') {
            // clear the folder
            deleteDir()
            // checkout H2O-3
            retry(3) {
              timeout(time: 1, unit: 'MINUTES') {
                echo "###### Checkout H2O-3 ######"
                def scmEnv = checkout scm
                echo "${scmEnv}"
                error "TESTING"
              }
            }
          }

          emailContent = load('h2o-3/scripts/jenkins/groovy/emailContent.groovy')
          sendEmail = load('h2o-3/scripts/jenkins/groovy/sendEmail.groovy')

          def setBuildDesc = load('h2o-3/scripts/jenkins/groovy/setBuildDescription.groovy')
          setBuildDesc()

          def prepareH2O3 = load('h2o-3/scripts/jenkins/groovy/prepareH2O3.groovy')
          buildConfig = prepareH2O3('MODE_MASTER', true)
          buildConfig.setDefaultOverrideRerun(true)

          def setJobProperties = load('h2o-3/scripts/jenkins/groovy/setJobProperties.groovy')
          setJobProperties(buildConfig)

          // Load the executeTestStages script
          executeTestStages = load('h2o-3/scripts/jenkins/groovy/executeTestStages.groovy')
        }
      }
      executeTestStages(buildConfig)
      result = 'SUCCESS'
    }
  }
} finally {
  if (emailContent != null && sendEmail != null) {
    sendEmail(result, emailContent)
  }
}